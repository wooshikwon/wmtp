#!/usr/bin/env python3
"""
AWS S3 ÎåÄÏö©Îüâ ÌååÏùº ÏµúÏ†ÅÌôî Îã§Ïö¥Î°úÎçî

10GB+ Î™®Îç∏ ÌååÏùºÎì§ÏùÑ ÏúÑÌïú Î©ÄÌã∞ÌååÌä∏ Î≥ëÎ†¨ Îã§Ïö¥Î°úÎìú ÏµúÏ†ÅÌôî
- TransferConfigÎ°ú Î≥ëÎ†¨ Îã§Ïö¥Î°úÎìú ÏÑ§Ï†ï
- ÏßÑÌñâÎ•† ÌëúÏãú
- ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû¨ÏãúÎèÑ Î°úÏßÅ
- Î©îÎ™®Î¶¨ Ìö®Ïú®Ï†Å Ï≤òÎ¶¨
"""

import os
import tempfile
from concurrent.futures import ThreadPoolExecutor, as_completed
from pathlib import Path

import boto3
from boto3.s3.transfer import TransferConfig
from botocore.exceptions import ClientError
from rich.console import Console
from rich.progress import (
    BarColumn,
    DownloadColumn,
    Progress,
    TaskID,
    TextColumn,
    TimeRemainingColumn,
    TransferSpeedColumn,
)

console = Console()


class OptimizedS3Downloader:
    """S3 ÎåÄÏö©Îüâ ÌååÏùº ÏµúÏ†ÅÌôî Îã§Ïö¥Î°úÎçî"""

    def __init__(
        self, aws_access_key: str, aws_secret_key: str, region: str = "eu-north-1"
    ):
        self.s3_client = boto3.client(
            "s3",
            aws_access_key_id=aws_access_key,
            aws_secret_access_key=aws_secret_key,
            region_name=region,
        )
        self.bucket = "wmtp"

        # ÎåÄÏö©Îüâ ÌååÏùºÏö© ÏµúÏ†ÅÌôî ÏÑ§Ï†ï
        self.transfer_config = TransferConfig(
            multipart_threshold=1024 * 25,  # 25MB Ïù¥ÏÉÅÎ∂ÄÌÑ∞ Î©ÄÌã∞ÌååÌä∏
            max_concurrency=10,  # ÏµúÎåÄ 10Í∞ú Î≥ëÎ†¨ Ïó∞Í≤∞
            multipart_chunksize=1024 * 25,  # 25MB Ï≤≠ÌÅ¨
            use_threads=True,  # Ïä§Î†àÎìú ÌíÄ ÏÇ¨Ïö©
            num_download_attempts=3,  # Ïû¨ÏãúÎèÑ 3Ìöå
            max_io_queue=100,  # I/O ÌÅê ÌÅ¨Í∏∞
            io_chunksize=1024 * 256,  # 256KB I/O Ï≤≠ÌÅ¨ (Î©îÎ™®Î¶¨ Ìö®Ïú®)
        )

        console.print("[green]‚úÖ S3 ÏµúÏ†ÅÌôî Îã§Ïö¥Î°úÎçî Ï¥àÍ∏∞Ìôî[/green]")
        console.print("  Î©ÄÌã∞ÌååÌä∏ ÏûÑÍ≥ÑÏ†ê: 25MB")
        console.print("  ÏµúÎåÄ Î≥ëÎ†¨ Ïó∞Í≤∞: 10")
        console.print("  Ï≤≠ÌÅ¨ ÌÅ¨Í∏∞: 25MB")

    def get_file_list(self, prefix: str) -> list[tuple[str, int]]:
        """S3 ÌååÏùº Î¶¨Ïä§Ìä∏ÏôÄ ÌÅ¨Í∏∞ Í∞ÄÏ†∏Ïò§Í∏∞"""
        console.print(f"[yellow]S3 ÌååÏùº Î¶¨Ïä§Ìä∏ Ï°∞Ìöå: {prefix}[/yellow]")

        files = []
        paginator = self.s3_client.get_paginator("list_objects_v2")

        for page in paginator.paginate(Bucket=self.bucket, Prefix=prefix):
            if "Contents" not in page:
                continue

            for obj in page["Contents"]:
                key = obj["Key"]
                size = obj["Size"]
                files.append((key, size))

                # ÌååÏùº ÌÅ¨Í∏∞Î•º ÏÇ¨ÎûåÏù¥ ÏùΩÍ∏∞ Ïâ¨Ïö¥ ÌòïÌÉúÎ°ú ÌëúÏãú
                if size > 1024**3:  # GB
                    size_str = f"{size / (1024**3):.1f}GB"
                elif size > 1024**2:  # MB
                    size_str = f"{size / (1024**2):.1f}MB"
                else:  # KB
                    size_str = f"{size / 1024:.1f}KB"

                console.print(f"  üìÅ {key.split('/')[-1]} ({size_str})")

        return files

    def download_file_optimized(
        self,
        s3_key: str,
        local_path: Path,
        file_size: int,
        progress: Progress,
        task_id: TaskID,
    ):
        """ÏµúÏ†ÅÌôîÎêú Îã®Ïùº ÌååÏùº Îã§Ïö¥Î°úÎìú"""
        try:
            # ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÌÅ¥ Í≤ΩÏö∞ Î©ÄÌã∞ÌååÌä∏ Îã§Ïö¥Î°úÎìú ÏûêÎèô Ï†ÅÏö©
            local_path.parent.mkdir(parents=True, exist_ok=True)

            # ÏßÑÌñâÎ•† ÏΩúÎ∞± Ìï®Ïàò
            def progress_callback(bytes_transferred):
                progress.update(task_id, advance=bytes_transferred)

            # S3 Îã§Ïö¥Î°úÎìú (boto3Í∞Ä ÏûêÎèôÏúºÎ°ú Î©ÄÌã∞ÌååÌä∏ ÌåêÎã®)
            self.s3_client.download_file(
                self.bucket,
                s3_key,
                str(local_path),
                Config=self.transfer_config,
                Callback=progress_callback,
            )

            return True, None

        except ClientError as e:
            error_msg = f"S3 Client Error: {e}"
            return False, error_msg
        except Exception as e:
            error_msg = f"Download Error: {e}"
            return False, error_msg

    def download_model_parallel(self, source_prefix: str, local_dir: Path) -> bool:
        """Î≥ëÎ†¨ Î™®Îç∏ Îã§Ïö¥Î°úÎìú"""
        console.print("[bold blue]üöÄ ÏµúÏ†ÅÌôîÎêú S3 Îã§Ïö¥Î°úÎìú ÏãúÏûë[/bold blue]")
        console.print(f"ÏÜåÏä§: s3://{self.bucket}/{source_prefix}")
        console.print(f"ÎåÄÏÉÅ: {local_dir}")

        # ÌååÏùº Î¶¨Ïä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞
        files = self.get_file_list(source_prefix)
        if not files:
            console.print("[red]‚ùå Îã§Ïö¥Î°úÎìúÌï† ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§[/red]")
            return False

        # Ï¥ù ÌååÏùº ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
        total_size = sum(size for _, size in files)
        console.print(
            f"[cyan]Ï¥ù Îã§Ïö¥Î°úÎìú ÌÅ¨Í∏∞: {total_size / (1024**3):.2f}GB ({len(files)}Í∞ú ÌååÏùº)[/cyan]"
        )

        # ÏßÑÌñâÎ•† ÌëúÏãúÍ∏∞ ÏÑ§Ï†ï
        with Progress(
            TextColumn("[bold blue]{task.description}"),
            BarColumn(),
            "[progress.percentage]{task.percentage:>3.1f}%",
            DownloadColumn(),
            TransferSpeedColumn(),
            TimeRemainingColumn(),
            console=console,
            refresh_per_second=4,  # Ï¥àÎãπ 4Ìöå Í∞±Ïã†
        ) as progress:
            # Í∞Å ÌååÏùºÎ≥Ñ Îã§Ïö¥Î°úÎìú ÌÉúÏä§ÌÅ¨ ÏÉùÏÑ±
            download_tasks = []
            for s3_key, file_size in files:
                file_name = s3_key.split("/")[-1]
                local_path = local_dir / s3_key.replace(source_prefix, "").lstrip("/")

                task_id = progress.add_task(f"üì• {file_name}", total=file_size)

                download_tasks.append((s3_key, local_path, file_size, task_id))

            # ÎåÄÏö©Îüâ ÌååÏùºÏùÄ ÏàúÏ∞® Îã§Ïö¥Î°úÎìú, ÏûëÏùÄ ÌååÏùºÎì§ÏùÄ Î≥ëÎ†¨ Ï≤òÎ¶¨
            large_files = [
                (key, path, size, task_id)
                for key, path, size, task_id in download_tasks
                if size > 100 * 1024 * 1024
            ]  # 100MB Ïù¥ÏÉÅ
            small_files = [
                (key, path, size, task_id)
                for key, path, size, task_id in download_tasks
                if size <= 100 * 1024 * 1024
            ]

            success_count = 0

            # ÎåÄÏö©Îüâ ÌååÏùº ÏàúÏ∞® Ï≤òÎ¶¨ (Î©ÄÌã∞ÌååÌä∏ ÏûêÎèô Ï†ÅÏö©)
            for s3_key, local_path, file_size, task_id in large_files:
                success, error = self.download_file_optimized(
                    s3_key, local_path, file_size, progress, task_id
                )
                if success:
                    success_count += 1
                    progress.update(task_id, completed=file_size)
                else:
                    console.print(f"[red]‚ùå Ïã§Ìå®: {s3_key} - {error}[/red]")

            # ÏûëÏùÄ ÌååÏùºÎì§ Î≥ëÎ†¨ Ï≤òÎ¶¨ (ÏµúÎåÄ 5Í∞ú ÎèôÏãú)
            if small_files:
                with ThreadPoolExecutor(max_workers=5) as executor:
                    future_to_task = {}
                    for s3_key, local_path, file_size, task_id in small_files:
                        future = executor.submit(
                            self.download_file_optimized,
                            s3_key,
                            local_path,
                            file_size,
                            progress,
                            task_id,
                        )
                        future_to_task[future] = (s3_key, task_id, file_size)

                    for future in as_completed(future_to_task):
                        s3_key, task_id, file_size = future_to_task[future]
                        try:
                            success, error = future.result()
                            if success:
                                success_count += 1
                                progress.update(task_id, completed=file_size)
                            else:
                                console.print(f"[red]‚ùå Ïã§Ìå®: {s3_key} - {error}[/red]")
                        except Exception as e:
                            console.print(f"[red]‚ùå ÏòàÏô∏: {s3_key} - {e}[/red]")

        # Í≤∞Í≥º ÏöîÏïΩ
        total_files = len(files)
        if success_count == total_files:
            console.print(
                f"[bold green]üéâ Îã§Ïö¥Î°úÎìú ÏôÑÎ£å: {success_count}/{total_files} ÌååÏùº ÏÑ±Í≥µ[/bold green]"
            )
            return True
        else:
            console.print(
                f"[yellow]‚ö†Ô∏è Î∂ÄÎ∂Ñ ÏÑ±Í≥µ: {success_count}/{total_files} ÌååÏùº ÏôÑÎ£å[/yellow]"
            )
            return success_count > 0


def test_sheared_llama_download():
    """Sheared LLaMA Îã§Ïö¥Î°úÎìú ÌÖåÏä§Ìä∏"""
    console.print("[bold blue]üß™ Sheared LLaMA 2.7B ÏµúÏ†ÅÌôî Îã§Ïö¥Î°úÎìú ÌÖåÏä§Ìä∏[/bold blue]")

    # AWS Ïù∏Ï¶ù Ï†ïÎ≥¥ - ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú Î°úÎìú
    downloader = OptimizedS3Downloader(
        os.getenv("AWS_ACCESS_KEY_ID"), os.getenv("AWS_SECRET_ACCESS_KEY")
    )

    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        local_dir = temp_path / "sheared_llama"

        console.print(f"[cyan]ÏûÑÏãú ÎîîÎ†âÌÜ†Î¶¨: {local_dir}[/cyan]")

        # ÏµúÏ†ÅÌôîÎêú Îã§Ïö¥Î°úÎìú Ïã§Ìñâ
        success = downloader.download_model_parallel(
            "models/Sheared-LLaMA-2.7B/", local_dir
        )

        if success:
            # Îã§Ïö¥Î°úÎìúÎêú ÌååÏùº ÌôïÏù∏
            console.print("[green]üìÇ Îã§Ïö¥Î°úÎìúÎêú ÌååÏùºÎì§:[/green]")
            for file_path in local_dir.rglob("*"):
                if file_path.is_file():
                    size = file_path.stat().st_size
                    if size > 1024**3:
                        size_str = f"{size / (1024**3):.2f}GB"
                    elif size > 1024**2:
                        size_str = f"{size / (1024**2):.1f}MB"
                    else:
                        size_str = f"{size / 1024:.1f}KB"
                    console.print(f"  ‚úÖ {file_path.name} ({size_str})")

            console.print(
                f"[bold green]‚úÖ Îã§Ïö¥Î°úÎìú ÏÑ±Í≥µ! ÏûÑÏãúÌè¥Îçî: {local_dir}[/bold green]"
            )
            console.print("[yellow]üí° Ïã§Ï†ú Î≥ÄÌôò ÏûëÏóÖÏùÑ Í≥ÑÏÜç ÏßÑÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå?[/yellow]")
        else:
            console.print("[red]‚ùå Îã§Ïö¥Î°úÎìú Ïã§Ìå®[/red]")


if __name__ == "__main__":
    # ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï - .env ÌååÏùºÏóêÏÑú Î°úÎìú
    from dotenv import load_dotenv

    load_dotenv()

    test_sheared_llama_download()
