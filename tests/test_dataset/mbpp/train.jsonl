{"task_id": 11, "text": "Write a function to calculate the sum of a list.", "code": "def sum_list(lst):\n    return sum(lst)", "test_list": ["assert sum_list([1, 2, 3]) == 6", "assert sum_list([]) == 0", "assert sum_list([5]) == 5"]}
{"task_id": 12, "text": "Write a function to find the maximum in a list.", "code": "def max_list(lst):\n    return max(lst) if lst else None", "test_list": ["assert max_list([1, 5, 3]) == 5", "assert max_list([10]) == 10", "assert max_list([]) == None"]}
{"task_id": 13, "text": "Write a function to count occurrences of an element.", "code": "def count_element(lst, elem):\n    return lst.count(elem)", "test_list": ["assert count_element([1, 2, 1, 3], 1) == 2", "assert count_element([1, 2, 3], 4) == 0"]}
{"task_id": 14, "text": "Write a function to check if a list is empty.", "code": "def is_empty(lst):\n    return len(lst) == 0", "test_list": ["assert is_empty([]) == True", "assert is_empty([1]) == False"]}
{"task_id": 15, "text": "Write a function to get the first element.", "code": "def first_element(lst):\n    return lst[0] if lst else None", "test_list": ["assert first_element([1, 2, 3]) == 1", "assert first_element([]) == None"]}
{"task_id": 16, "text": "Write a function to get the last element.", "code": "def last_element(lst):\n    return lst[-1] if lst else None", "test_list": ["assert last_element([1, 2, 3]) == 3", "assert last_element([]) == None"]}
{"task_id": 17, "text": "Write a function to remove duplicates from a list.", "code": "def remove_duplicates(lst):\n    return list(set(lst))", "test_list": ["assert set(remove_duplicates([1, 2, 2, 3])) == {1, 2, 3}"]}
{"task_id": 18, "text": "Write a function to check if all elements are positive.", "code": "def all_positive(lst):\n    return all(x > 0 for x in lst)", "test_list": ["assert all_positive([1, 2, 3]) == True", "assert all_positive([1, -2, 3]) == False"]}
{"task_id": 19, "text": "Write a function to flatten a 2D list.", "code": "def flatten(lst):\n    return [item for sublist in lst for item in sublist]", "test_list": ["assert flatten([[1, 2], [3, 4]]) == [1, 2, 3, 4]"]}
{"task_id": 20, "text": "Write a function to zip two lists.", "code": "def zip_lists(lst1, lst2):\n    return list(zip(lst1, lst2))", "test_list": ["assert zip_lists([1, 2], ['a', 'b']) == [(1, 'a'), (2, 'b')]"]}