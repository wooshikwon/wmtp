[project]
name = "wmtp"
version = "0.1.0"
description = "Meta Multi-Token Prediction Fine-Tuning Framework"
authors = [
    {name = "WMTP Contributors"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
dependencies = [
    "torch>=2.4.0,<2.5.0",
    "transformers>=4.42.0,<5.0.0",
    "accelerate>=0.33.0",
    "peft>=0.11.0",
    "mlflow>=2.14.0",
    "boto3>=1.34.0",
    "pydantic>=2.6.0",
    "pyyaml>=6.0.1",
    "datasets>=2.20.0",
    "numpy>=1.24.0,<2.0.0",
    "tqdm>=4.66.0",
    "typer>=0.12.0",
    "rich>=13.7.0",
    "sentencepiece>=0.2.0",
    "protobuf>=3.20.0",
    "safetensors>=0.4.0",
    "botocore>=1.40.35",
    "fairscale>=0.4.13",
    "psutil>=7.0.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.5.0",
    "mypy>=1.0.0",
    "pre-commit>=3.7.0",
    "ipython>=8.20.0",
]
flash = [
    "flash-attn>=2.5.0",
]
cuda = [
    "bitsandbytes>=0.43.0",
]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "B905",   # zip without explicit strict parameter
    "SIM105", # use contextlib.suppress
    "UP038",  # isinstance modernization (deprecated by ruff)
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Interface/wrapper functions - intentional unused parameters
"src/components/loader/base_loader.py" = ["ARG002"]
"src/components/loader/data_loader.py" = ["ARG002"]
"src/components/loader/model_loader.py" = ["ARG001", "ARG002"]
"src/components/tokenizer/*.py" = ["ARG002", "ARG003", "ARG004"]
"src/components/trainer/*.py" = ["ARG002"]
"src/components/optimizer/*.py" = ["ARG002", "F401"]
"src/components/evaluator/*.py" = ["ARG002"]
"src/utils/optimized_s3_transfer.py" = ["ARG002"]
"src/cli/*.py" = ["ARG001"]
"tests/**/*.py" = ["ARG001", "ARG002"]
# Re-export modules for clean API
"src/components/trainer/__init__.py" = ["F401"]
# Factory pattern - interface uniformity
"src/factory/component_factory.py" = ["ARG004"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = """
    -ra
    --strict-markers
    --strict-config
    --cov=src
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=80
"""
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@abstractmethod",
]

[tool.uv]
package = false

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
