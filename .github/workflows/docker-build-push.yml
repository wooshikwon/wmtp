name: Docker Build and Push

# 트리거 조건: main/master 브랜치 푸시 또는 수동 실행
on:
  push:
    branches:
      - main
      - master
      - downloading_and_mps  # 현재 작업 브랜치
    paths:
      - 'src/**'
      - 'configs/**'
      - 'tests/**'
      - 'docker/**'
      - 'pyproject.toml'
      - 'uv.lock'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:  # 수동 실행 허용

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: 코드 린트 및 타입 체크
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Run linting
        run: |
          uv run ruff check src/
        continue-on-error: true  # 린트 실패해도 계속 진행

      - name: Run type checking
        run: |
          uv run mypy src/ --ignore-missing-imports
        continue-on-error: true  # 타입 체크 실패해도 계속 진행

  # Job 2: 테스트 실행 (dry-run)
  test:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        algorithm: [baseline-mtp, critic-wmtp, rho1-weighted, rho1-tokenskip]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Test ${{ matrix.algorithm }} (dry-run)
        run: |
          if [ "${{ matrix.algorithm }}" == "baseline-mtp" ]; then
            RECIPE=configs/recipe.mtp_baseline.yaml
          elif [ "${{ matrix.algorithm }}" == "critic-wmtp" ]; then
            RECIPE=configs/recipe.critic_wmtp.yaml
          elif [ "${{ matrix.algorithm }}" == "rho1-weighted" ]; then
            RECIPE=configs/recipe.rho1_wmtp_weighted.yaml
          else
            RECIPE=configs/recipe.rho1_wmtp_tokenskip.yaml
          fi

          uv run python -m src.cli.train \
            --config tests/configs/config.local_test.yaml \
            --recipe $RECIPE \
            --dry-run \
            --verbose

  # Job 3: Docker 빌드 및 푸시
  docker-build-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate image report
        if: github.event_name != 'pull_request'
        run: |
          echo "### 🐳 Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry**: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Job 4: VESSL 자동 배포 (선택적, main 브랜치만)
  vessl-deploy:
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production  # GitHub 환경 사용 (수동 승인 가능)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install VESSL CLI
        run: |
          pip install vessl

      - name: VESSL Login
        env:
          VESSL_API_TOKEN: ${{ secrets.VESSL_API_TOKEN }}
        run: |
          vessl configure --token $VESSL_API_TOKEN

      - name: Deploy to VESSL
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # 각 알고리즘에 대해 테스트 실행 (순차적)
          for ALGO in baseline-mtp critic-wmtp rho1-weighted rho1-tokenskip; do
            echo "Deploying $ALGO to VESSL..."
            vessl run create \
              --file docker/vessl.yaml \
              --env WMTP_ALGO=$ALGO \
              --env ENV_MODE=test \
              --name "ci-test-$ALGO-${{ github.sha }}"
          done