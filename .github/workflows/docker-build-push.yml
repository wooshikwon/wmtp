name: Docker Build and Push

# 트리거 조건: main/master 브랜치 푸시 또는 수동 실행
on:
  push:
    branches:
      - main
      - master
      - downloading_and_mps  # 현재 작업 브랜치
    paths:
      - 'src/**'
      - 'configs/**'
      - 'tests/**'
      - 'docker/**'
      - 'pyproject.toml'
      - 'uv.lock'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:  # 수동 실행 허용

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: 코드 린트 및 타입 체크
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Run linting
        run: |
          uv run ruff check src/
        continue-on-error: true  # 린트 실패해도 계속 진행

      - name: Run type checking
        run: |
          uv run mypy src/ --ignore-missing-imports
        continue-on-error: true  # 타입 체크 실패해도 계속 진행

  # Job 2: 테스트 실행
  test:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        recipe: [mtp_baseline, critic_wmtp, rho1_wmtp_weighted, rho1_wmtp_tokenskip]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Download test models from HuggingFace
        run: |
          mkdir -p tests/test_models

          # distilgpt2 다운로드
          uv run python -c "
          from transformers import AutoModelForCausalLM, AutoTokenizer, AutoConfig

          models = [
              ('distilgpt2', 'tests/test_models/distilgpt2'),
              ('distilgpt2', 'tests/test_models/distilgpt2-mtp'),
          ]

          for model_name, save_path in models:
              print(f'Downloading {model_name} to {save_path}...')
              AutoConfig.from_pretrained(model_name).save_pretrained(save_path)
              AutoTokenizer.from_pretrained(model_name).save_pretrained(save_path)
              AutoModelForCausalLM.from_pretrained(model_name).save_pretrained(save_path)
              print(f'✓ Downloaded {model_name}')

          # tiny-reward-model-gpt2 다운로드 (존재하는 경우)
          try:
              save_path = 'tests/test_models/tiny-reward-model-gpt2'
              print(f'Downloading tiny-reward-model to {save_path}...')
              AutoConfig.from_pretrained('distilgpt2').save_pretrained(save_path)
              AutoTokenizer.from_pretrained('distilgpt2').save_pretrained(save_path)
              AutoModelForCausalLM.from_pretrained('distilgpt2').save_pretrained(save_path)
              print(f'✓ Downloaded tiny-reward-model')
          except Exception as e:
              print(f'Warning: Could not download tiny-reward-model: {e}')
          "

      - name: Test ${{ matrix.recipe }}
        run: |
          uv run python -m src.cli.train \
            --config tests/configs/config.local_test.yaml \
            --recipe tests/configs/recipe.${{ matrix.recipe }}.yaml \
            --verbose

  # Job 3: Docker 빌드 및 푸시
  docker-build-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate image report
        if: github.event_name != 'pull_request'
        run: |
          echo "### 🐳 Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry**: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
